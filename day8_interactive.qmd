---
title: "Day 8 Interactive"
format: html
editor: visual
---

## Review basics of ggplot

```{r}
library(tidyverse)
library(here)
library(janitor)

library(patchwork)
library(ggrepel)
library(gghighlight)
library(paletteer)
library(ggExtra)
library(ggbeeswarm)


```

## Read in data

```{r}
lizards <- read_csv(here("data_tidy", "lizards.csv"))
```

Do some data wrangling to create new subset from lizards wehre you:

1.  Limit data to only contain western whiptails, colorado checkered, eastern fence lizards
2.  Add a new column with total length converted to cm
3.  Group by species and site
4.  Return a summary table with mean total length and standard deviation of total length by species and site

```{r}
length_table <- lizards %>% 
  filter(common_name %in% c("western whiptail", 
                            "colorado checkered", 
                            "eastern fence")) %>% 
  mutate(total_length_cm = total_length / 10) %>% 
  group_by(common_name, site) %>% 
  summarize(mean_tot_length_cm = mean(total_length_cm, na.rm = TRUE), 
            sd_tot_length_cm = sd(total_length_cm, na.rm = TRUE))
```

Make a basic scatter plot

```{r}
ggplot(data = lizards, aes(x = total_length, 
                           y = weight)) + 
  geom_point(aes(color = common_name)) +
  facet_wrap(~ common_name) # default is they all on same scale, can use "scale = "free"" to change
```

Make a bar chart

Use dplyr::count to find the total number of lizards by common name in the lizards dataset

```{r}
lizard_counts <- lizards %>% 
  dplyr::count(common_name)

ggplot(data = lizard_counts, aes(y = common_name, x = n)) + # switch x and y axis if label on x are too long to make more readable
  geom_col()
# in order to set an order, need to make variable a factor -- we can use fct_reorder to base order on a value in another column

ggplot(data = lizard_counts, aes(y = fct_reorder(common_name, n), x = n)) +
  geom_col()
```

play around with ***scale***

```{r}
ggplot(data = lizards, aes(x = total_length, 
                           y = weight)) + 
  geom_point(aes(color = weight)) +
  scale_y_continuous(limits = c(0, 100),
                     breaks = seq(from = 0, to = 100, by = 20),
                     expand = c(0,0)) + # get rid of extra space above and below limits
  scale_color_gradientn(colors = c("yellow", "orange", "purple"))
```
